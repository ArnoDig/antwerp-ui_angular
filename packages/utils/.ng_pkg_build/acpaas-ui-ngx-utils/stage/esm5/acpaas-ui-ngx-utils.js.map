{
  "version": 3,
  "file": "acpaas-ui-ngx-utils.js",
  "sources": [
    "ng://@acpaas-ui/ngx-utils/out/labels/labels.module.ts",
    "ng://@acpaas-ui/ngx-utils/out/labels/labels.pipe.ts",
    "ng://@acpaas-ui/ngx-utils/out/labels/labels.interpolation.ts",
    "ng://@acpaas-ui/ngx-utils/out/utils/to-uppercase.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n\nimport { InterpolateLabelPipe, PluralizeLabelPipe } from './labels.pipe';\n\n@NgModule({\n    declarations: [\n        InterpolateLabelPipe,\n        PluralizeLabelPipe\n    ],\n    exports: [\n        InterpolateLabelPipe,\n        PluralizeLabelPipe\n    ]\n})\nexport class LabelsModule {\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { interpolate } from './labels.interpolation';\nimport { ReplaceData, Label } from './labels.types';\n\n@Pipe({\n    name: 'interpolateLabel'\n})\nexport class InterpolateLabelPipe implements PipeTransform {\n    transform(label: string, replaceData: ReplaceData): string {\n        if (!replaceData || !label) {\n            return label;\n        }\n\n        return interpolate(label, replaceData);\n    }\n}\n\n@Pipe({\n    name: 'pluralizeLabel'\n})\nexport class PluralizeLabelPipe implements PipeTransform {\n    transform(label: Label|string, count: number): string {\n        if (!label || typeof label === 'string') {\n            return label as string;\n        }\n\n        return count === 1 ? label.singular : label.plural;\n    }\n}\n",
    "import { ReplaceData } from './labels.types';\n\nexport const interpolate = (label: string, replaceData?: ReplaceData): string => {\n    if (!replaceData) {\n        return label;\n    }\n\n    const escapeStringRegExp = prop => prop.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    const pattern = new RegExp(`\\%{(${Object.keys(replaceData).map(escapeStringRegExp).join('|')})\\}`, 'g');\n\n    return label.replace(pattern, (match, prop) => replaceData[prop] ? String(replaceData[prop]) : '');\n};\n",
    "export const toUpperCase = (value: any) => value.toString().toUpperCase();"
  ],
  "names": [],
  "mappings": ";;AGAA,IAAa,WAAW,GAAG,UAAC,KAAU,IAAK,OAAA,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,GAAA,CAAzE;ADEA,IAAa,WAAW,GAAG,UAAC,KAAa,EAAE,WAAyB;IAChE,IAAI,CAAC,WAAW,EAAE;QACd,OAAO,KAAK,CAAC;KAChB;IAED,IAAM,kBAAkB,GAAG,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,GAAA,CAAC;IAC/E,IAAM,OAAO,GAAG,IAAI,MAAM,CAAC,QAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAK,EAAE,GAAG,CAAC,CAAC;IAExG,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAA,CAAC,CAAC;CACtG,CAAD;ADXA;IAAA;;IASI,wCAAS,GAAT,UAAU,KAAa,EAAE,WAAwB;QAC7C,IAAI,CAAC,WAAW,IAAI,CAAC,KAAK,EAAE;YACxB,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;KAC1C;;;;IAVL,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM;gBACF,IAAI,EAAE,kBAAkB;aAC3B,EAAD,EAAA;;AAcA;IAAA;;IACI,sCAAS,GAAT,UAAU,KAAmB,EAAE,KAAa;QACxC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACrC,QAAO,KAAe,EAAC;SAC1B;QAED,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC;KACtD;;;;IAVL,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM;gBACF,IAAI,EAAE,gBAAgB;aACzB,EAAD,EAAA;;ADpBA;IAAA;;;;;IAIA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACN,YAAY,EAAE;oBACV,oBAAoB;oBACpB,kBAAkB;iBACrB;gBACD,OAAO,EAAE;oBACL,oBAAoB;oBACpB,kBAAkB;iBACrB;aACJ,EAAD,EAAA;;;;;"
}
